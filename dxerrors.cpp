#include "stdafx.h"
#pragma hdrstop

class hres2str_map
{
public:
	std::map<HRESULT, const char*> map;
	hres2str_map()
	{
		struct entry
		{
			HRESULT hres;
			const char * str;
		};
		static entry entries[] = {
			{S_OK,"S_OK"},
			{E_NOINTERFACE,"E_NOINTERFACE"},
			// Direct Draw errors
			{DDERR_DIRECTDRAWALREADYCREATED,"DDERR_DIRECTDRAWALREADYCREATED"},
			{DDERR_EXCEPTION,"DDERR_EXCEPTION"},
			{DDERR_GENERIC,"DDERR_GENERIC"},
			{DDERR_INCOMPATIBLEPRIMARY,"DDERR_INCOMPATIBLEPRIMARY"},
			{DDERR_INVALIDCAPS,"DDERR_INVALIDCAPS"},
			{DDERR_INVALIDCLIPLIST,"DDERR_INVALIDCLIPLIST"},
			{DDERR_INVALIDDIRECTDRAWGUID,"DDERR_INVALIDDIRECTDRAWGUID"},
			{DDERR_INVALIDMODE,"DDERR_INVALIDMODE"},
			{DDERR_INVALIDOBJECT,"DDERR_INVALIDOBJECT"},
			{DDERR_INVALIDPARAMS,"DDERR_INVALIDPARAMS"},
			{DDERR_INVALIDPIXELFORMAT,"DDERR_INVALIDPIXELFORMAT"},
			{DDERR_INVALIDRECT,"DDERR_INVALIDRECT"},
			{DDERR_LOCKEDSURFACES, "DDERR_LOCKEDSURFACES"},
			{DDERR_NOALPHAHW,"DDERR_NOALPHAHW"},
			{DDERR_NOBLTHW,"DDERR_NOBLTHW"},
			{DDERR_NOCLIPLIST,"DDERR_NOCLIPLIST"},
			{DDERR_NOCOOPERATIVELEVELSET,"DDERR_NOCOOPERATIVELEVELSET"},
			{DDERR_NODIRECTDRAWHW,"DDERR_NODIRECTDRAWHW"},
			{DDERR_NODDROPSHW,"DDERR_NODDROPSHW"},
			{DDERR_NOEMULATION,"DDERR_NOEMULATION"},
			{DDERR_NOEXCLUSIVEMODE,"DDERR_NOEXCLUSIVEMODE"},
			{DDERR_NOFLIPHW,"DDERR_NOFLIPHW"},
			{DDERR_NOMIPMAPHW,"DDERR_NOMIPMAPHW"},
			{DDERR_NOMIRRORHW,"DDERR_NOMIRRORHW"},
			{DDERR_NOOVERLAYHW,"DDERR_NOOVERLAYHW"},
			{DDERR_NORASTEROPHW, "DDERR_NORASTEROPHW"},
			{DDERR_NOROTATIONHW, "DDERR_NOROTATIONHW"},
			{DDERR_NOSTRETCHHW, "DDERR_NOSTRETCHHW"},
			{DDERR_NOTFOUND, "DDERR_NOTFOUND"},
			{DDERR_NOZBUFFERHW,"DDERR_NOZBUFFERHW"},
			{DDERR_OUTOFMEMORY,"DDERR_OUTOFMEMORY"},
			{DDERR_OUTOFVIDEOMEMORY,"DDERR_OUTOFVIDEOMEMORY"},
			{DDERR_PRIMARYSURFACEALREADYEXISTS,"DDERR_PRIMARYSURFACEALREADYEXISTS"},
			{DDERR_SURFACEBUSY,"DDERR_SURFACEBUSY"},
			{DDERR_SURFACELOST,"DDERR_SURFACELOST"},
			{DDERR_UNSUPPORTED,"DDERR_UNSUPPORTED"},
			{DDERR_UNSUPPORTEDMODE,"DDERR_UNSUPPORTEDMODE"},
			{DDERR_WASSTILLDRAWING,"DDERR_WASSTILLDRAWING"},
			// Direct Sound errors
			{DSERR_ALLOCATED, "DSERR_ALLOCATED"},
			{DSERR_BUFFERLOST, "DSERR_BUFFERLOST"},
			{DSERR_INVALIDCALL, "DSERR_INVALIDCALL"},
			{DSERR_INVALIDPARAM, "DSERR_INVALIDPARAM"},
			{DSERR_NOAGGREGATION, "DSERR_NOAGGREGATION"},
			{DSERR_NODRIVER, "DSERR_NODRIVER"},
			{DSERR_OUTOFMEMORY, "DSERR_OUTOFMEMORY"},
			{DSERR_PRIOLEVELNEEDED, "DSERR_PRIOLEVELNEEDED"}
			};

		for (unsigned i = 0; i < sizeof(entries)/sizeof(entries[0]); i++)
		map.insert(std::map<HRESULT,const char*>::value_type(entries[i].hres, entries[i].str));
	}
};

const char * hres2str(HRESULT hres)
{
	static hres2str_map hres2str_map;
	std::map<HRESULT,const char*>::iterator iter;
	iter = hres2str_map.map.find(hres);
	if (iter->first != hres)
		return "no hres entry";
	return iter->second;
}
